#!/usr/bin/env sh

# This hook has a focus on portability.
# This hook will attempt to setup your environment before running checks.
#
# If you would like `pre-commit` to get out of your way and you are comfortable
# setting up your own environment, you can install the manual hook using:
#
#     pre-commit install --manual
#

# This is a work-around to get GitHub for Mac to be able to run `node` commands
# https://stackoverflow.com/questions/12881975/git-pre-commit-hook-failing-in-github-for-mac-works-on-command-line

# 一時ファイル
temp_name=$(mktemp)
trap 'rm ${temp_name}' 0

# エラーの場合に出力する
function error_log() {
    local command=$1
    local message=$2

    printf "\e[33;41;1m\n"
    echo "---------------------------------------------------------------------"
    echo "message:\n  $1"
    echo "command:\n  $2"
    echo "---------------------------------------------------------------------"
    printf "\e[m"
}

function docker_run() {
    local command=$1
    local start_message=$2
    local error_message=$3

    # コマンド開始メッセージ
    printf "\e[36;40;1m"
    printf "Begin: "
    echo "$start_message"
    printf "\e[m"

    # チェックコマンド実行
    docker-compose -f application/docker-compose.yml run web $command  >& $temp_name
    if [ $? -ne 0 ]; then
        error_log "$error_message" "$command"
        cat $temp_name
        exit 1
    fi

    # コマンド開始メッセージ
    printf "\e[36;40;1m"
    printf "End:   "
    echo "$start_message"
    printf "\e[m"
}



# rubocopでコードを解析
rubocop="bundle exe rubocop"
start_message="checking code style"
error_message="Please check code style. \n  try this command \"docker-compose run web bundle exe rubocop -a\""
docker_run "$rubocop" "$start_message" "$error_message"

# コードのセキュリティ解析
brakeman="bundle exec brakeman -5 -A -w 1 -z"
start_message="checking code security"
error_message="Please check code security."
docker_run "$brakeman" "$start_message" "$error_message"
